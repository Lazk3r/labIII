// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "06/20/2023 22:01:25"

// 
// Device: Altera EP4CGX15BF14C6 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module moore (
	Z,
	CLK,
	Xin,
	Win);
output 	Z;
input 	CLK;
input 	Xin;
input 	Win;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \inst12~0_combout ;
wire \inst13~0_combout ;
wire \CLK~input_o ;
wire \Z~output_o ;
wire \Win~input_o ;
wire \inst12~1_combout ;
wire \inst~q ;
wire \Xin~input_o ;
wire \inst13~1_combout ;
wire \inst1~q ;
wire \inst14~0_combout ;
wire \inst14~1_combout ;
wire \inst2~q ;
wire \inst22~combout ;


cycloneiv_lcell_comb \inst12~0 (
// Equation(s):
// \inst12~0_combout  = (\inst2~q  & (\Xin~input_o  & ((\inst1~q ) # (\inst~q ))))

	.dataa(\inst2~q ),
	.datab(\Xin~input_o ),
	.datac(\inst1~q ),
	.datad(\inst~q ),
	.cin(gnd),
	.combout(\inst12~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst12~0 .lut_mask = 16'h8880;
defparam \inst12~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_lcell_comb \inst13~0 (
// Equation(s):
// \inst13~0_combout  = (\inst1~q  & (((!\Win~input_o )))) # (!\inst1~q  & ((\inst~q  & ((!\Win~input_o ))) # (!\inst~q  & (\inst2~q  & \Win~input_o ))))

	.dataa(\inst2~q ),
	.datab(\inst1~q ),
	.datac(\inst~q ),
	.datad(\Win~input_o ),
	.cin(gnd),
	.combout(\inst13~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst13~0 .lut_mask = 16'h02FC;
defparam \inst13~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \CLK~input (
	.i(CLK),
	.ibar(gnd),
	.o(\CLK~input_o ));
// synopsys translate_off
defparam \CLK~input .bus_hold = "false";
defparam \CLK~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_obuf \Z~output (
	.i(\inst22~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Z~output_o ),
	.obar());
// synopsys translate_off
defparam \Z~output .bus_hold = "false";
defparam \Z~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_ibuf \Win~input (
	.i(Win),
	.ibar(gnd),
	.o(\Win~input_o ));
// synopsys translate_off
defparam \Win~input .bus_hold = "false";
defparam \Win~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \inst12~1 (
// Equation(s):
// \inst12~1_combout  = (\inst12~0_combout ) # ((\inst22~combout  & \Win~input_o ))

	.dataa(\inst12~0_combout ),
	.datab(\inst22~combout ),
	.datac(\Win~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst12~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst12~1 .lut_mask = 16'hEAEA;
defparam \inst12~1 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas inst(
	.clk(\CLK~input_o ),
	.d(\inst12~1_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst.is_wysiwyg = "true";
defparam inst.power_up = "low";
// synopsys translate_on

cycloneiv_io_ibuf \Xin~input (
	.i(Xin),
	.ibar(gnd),
	.o(\Xin~input_o ));
// synopsys translate_off
defparam \Xin~input .bus_hold = "false";
defparam \Xin~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \inst13~1 (
// Equation(s):
// \inst13~1_combout  = (\inst13~0_combout  & !\Xin~input_o )

	.dataa(\inst13~0_combout ),
	.datab(gnd),
	.datac(gnd),
	.datad(\Xin~input_o ),
	.cin(gnd),
	.combout(\inst13~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst13~1 .lut_mask = 16'h00AA;
defparam \inst13~1 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas inst1(
	.clk(\CLK~input_o ),
	.d(\inst13~1_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst1~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst1.is_wysiwyg = "true";
defparam inst1.power_up = "low";
// synopsys translate_on

cycloneiv_lcell_comb \inst14~0 (
// Equation(s):
// \inst14~0_combout  = (\inst1~q  & (((\Xin~input_o  & \inst2~q )) # (!\Win~input_o ))) # (!\inst1~q  & (\Xin~input_o  & ((!\Win~input_o ))))

	.dataa(\inst1~q ),
	.datab(\Xin~input_o ),
	.datac(\inst2~q ),
	.datad(\Win~input_o ),
	.cin(gnd),
	.combout(\inst14~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst14~0 .lut_mask = 16'h80EE;
defparam \inst14~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_lcell_comb \inst14~1 (
// Equation(s):
// \inst14~1_combout  = (\inst~q ) # (\inst14~0_combout )

	.dataa(\inst~q ),
	.datab(\inst14~0_combout ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst14~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst14~1 .lut_mask = 16'hEEEE;
defparam \inst14~1 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas inst2(
	.clk(\CLK~input_o ),
	.d(\inst14~1_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst2~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst2.is_wysiwyg = "true";
defparam inst2.power_up = "low";
// synopsys translate_on

cycloneiv_lcell_comb inst22(
// Equation(s):
// \inst22~combout  = (\inst~q ) # ((\inst1~q  & \inst2~q ))

	.dataa(\inst~q ),
	.datab(\inst1~q ),
	.datac(\inst2~q ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst22~combout ),
	.cout());
// synopsys translate_off
defparam inst22.lut_mask = 16'hEAEA;
defparam inst22.sum_lutc_input = "datac";
// synopsys translate_on

assign Z = \Z~output_o ;

endmodule
